#include <stdio.h>
#define MEMORY_SIZE 1000
struct Block {
    int size;
    int allocated;
};
struct Block memory[MEMORY_SIZE];
void initializeMemory() {
    memory[0].size = MEMORY_SIZE;
    memory[0].allocated = 0;
}
void displayMemory() {
    printf("Memory Status:\n");
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i].allocated) {
            printf("Allocated Block of Size %d\n", memory[i].size);
        } else {
            printf("Free Block of Size %d\n", memory[i].size);
        }
    }
    printf("\n");
}
int worstFit(int size) {
    int worstFitIndex = -1;
    int worstFitSize = 0;
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (!memory[i].allocated && memory[i].size >= size) {
            if (memory[i].size > worstFitSize) {
                worstFitSize = memory[i].size;
                worstFitIndex = i;
            }
        }
    }
    return worstFitIndex;
}
void allocateMemory(int processSize) {
    int index = worstFit(processSize);
    if (index != -1) {
        memory[index].allocated = 1;
        if (memory[index].size > processSize) {
            int remainingSize = memory[index].size - processSize;
            memory[index + processSize].size = remainingSize;
            memory[index + processSize].allocated = 0;
            memory[index].size = processSize;
        }
        printf("Memory Allocated Successfully!\n");
    } else {
        printf("Memory Allocation Failed. Not enough space.\n");
    }
}
int main() {
    initializeMemory();
    displayMemory();
    allocateMemory(200);
    allocateMemory(300);
    allocateMemory(150);
    displayMemory();
    return 0;
}
